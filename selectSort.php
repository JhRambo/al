<?php

/**
 * 选择排序（Selection sort）是一种简单直观的排序算法。
 * 它的工作原理如下：
 * 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，
 * 然后，每次再从剩余未排序元素中继续寻找最小（大）元素，
 * 然后放到已排序序列的末尾。
 * 以此类推，直到所有元素均排序完毕。
 * 选择排序的主要优点与数据移动有关。
 * 如果某个元素位于正确的最终位置上，则它不会被移动。
 * 选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，
 * 因此对 n 个元素的表进行排序总共进行至多 n -1 次交换。
 * 在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种
 * 它的最优时间复杂度为O(n^2)
 * 最糟糕时间复杂度为O(n^2)
 * 平均时间复杂度O(n^2)
 * 空间复杂度O(1)
 * 不稳定算法
 */
function selectSort($arr)
{
    $count = count($arr);       //统计出数组的长度
    if ($count <= 1) {  // 如果个数为空或者1，则原样返回数组
        return $arr;
    }
    for ($i = 0; $i < $count - 1; $i++) {   //执行n次
        // 当前值的位置
        $key = $i;
        for ($j = $i + 1; $j < $count; $j++) {  //执行n次
            //总执行n*n次
            // 相邻值进行比较，条件成立替换当前值
            // 倒序 $arr[$key] < $arr[$k]
            if ($arr[$key] > $arr[$j]) {
                $key = $j;
            }
        }
        //每循环一次，找到一个最大或最小的值进行替换
        if ($key != $i) {
            // 交换位置
            $temp = $arr[$key];
            $arr[$key] = $arr[$i];
            $arr[$i] = $temp;
        }
    }
    return $arr;
}

$arrtest = [12, 43, 54, 33, 23, 14, 44, 53, 10, 3, 56]; //测试数组
$res = selectSort($arrtest);
print_r($res);
var_dump(memory_get_usage());
